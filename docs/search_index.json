[
["index.html", "bdchecks User Guide Introduction", " bdchecks User Guide Authors: Tomer Gueta and Povilas Gibas built on 2018-10-16 Introduction bdchecks supplies a Shiny app and a set of functions to perform and manage various data checks for biodiversity data. bdchecks is part of the bdverse– a collection of tools, that form a general framework for facilitating biodiversity science in R. bdchecks in the bdverse What are biodiversity data checks? Data checks can include format checks, completeness checks, reasonableness checks, limit checks, etc. These processes usually result in flagging, documenting, and subsequent correcting or eliminating of suspect records. The checks must be specifically tailored around the structure of the data at hand, in our case, the Darwin Core standard. Ideally, a data check needs to hold its functionality and relevant metadata. What bdchecks can do for you? bdchecks offers various features for various R users: Using the Shiny app inexperienced R users can easily perform all data check and can easily filter the data accordingly. See The shiny app section. Experienced R users can perform all data checks by utilizing few R functions form the command line or within an R script. See Command line operations section. Advanced R users can even edit, add and manage their own collection of data checks, quite easily so. See Data checks YAML file section. Fundings See the GSoC project idea page "],
["installing-bdchecks.html", "1 Installing bdchecks 1.1 Development version from GitHub 1.2 Very soon: a stable version from CRAN 1.3 Possible installation problems &amp; solutions", " 1 Installing bdchecks 1.1 Development version from GitHub Windows users install Rtools first. install.packages(&quot;devtools&quot;) devtools::install_github(&quot;bd-R/bdchecks&quot;) 1.2 Very soon: a stable version from CRAN install.packages(&quot;bdchecks&quot;) 1.3 Possible installation problems &amp; solutions [ TBA ] 1.3.1 ??? TBA 1.3.2 ???? TBA*** "],
["the-shiny-app.html", "2 The shiny app 2.1 Launching the app 2.2 Data upload 2.3 Choose data checks 2.4 Checks results and data filtering 2.5 Closing the app 2.6 References", " 2 The shiny app 2.1 Launching the app library(bdchecks) # Uplaod package library runbdchecks() # Launch the app 2.2 Data upload 2.2.1 From a local file A CSV file or a Darwin Core Archive (DwC-A) zip file can be uploaded. Data upload from a local file 2.2.2 From an online database Also, data can be retrieved directly from various online biodiversity databases. You need only to: Select the database Specify the desired scientific name. Specify the number of records (upper limit of 50,000). Check the box if records must have coordinates. Wait for data to be downloaded. Data upload from online biodiversity databases 2.2.3 Accept dataset ‘Accept dataset’ to move to the next step 2.3 Choose data checks Choose a data check by checking its box Hovering over a data check name shows a short description 2.4 Checks results and data filtering 2.4.1 Overwiew Results page overview 2.4.2 Filtering the data based on the results Choose specific results to filter out Filter the data and download your filtered data 2.5 Closing the app Just close the app browser tab, and the R session will be terminated. To reopen it run in the R Console runbdchecks(). 2.6 References "],
["command-line-operations.html", "3 Command line operations 3.1 Load package 3.2 Perform data checks 3.3 Review performed checks 3.4 Filtering your data", " 3 Command line operations 3.1 Load package Load the bdchecks package library(bdchecks) 3.2 Perform data checks bdchecks contains a dataset on bats named dataBats. To perform all data checks use performDataCheck: resultDC &lt;- bdchecks::performDataCheck(bdchecks::dataBats) replace bdchecks::dataBats with your own dataset name. 3.3 Review performed checks See which data checks were performed: resultDC Review data checks result (% of records that passed, failed or have missing data) # Nice summary summary_DC(resultDC) 3.4 Filtering your data [ TBA ] "],
["data-checks-yaml-file.html", "4 Data checks YAML file 4.1 Data check example 4.2 Manage your own data checks", " 4 Data checks YAML file The YMAL file holds the code and metadata of all data checks. The checks are derived from a core suite of tests and assertions being developed by TDWG’s Biodiversity Data Quality Task Group 2 ( Data Quality Tests and Assertions). More information and links can be found in the Learn more section. 4.1 Data check example DC_b23110e7-1be7-444a-a677-cdee0cf4330c: name: countryMismatch meta: Description: Main: Check if given country match given country code. InputQuestion: Does country and country code match? Example: Fail: Country name (dwc:country) and ISO country code (dwc:countryCode) do not match Pass: Country name (dwc:country) and ISO country code (dwc:countryCode) match InputFail: country=Australia, countryCode=4 InputPass: country=Australia, countryCode=AU OutputFail: Failed OutputPass: Passed Resolution: Record: SingleRecord Term: MultiTerm DarwinCoreClass: Location Keywords: location,iso,country guid: b23110e7-1be7-444a-a677-cdee0cf4330c Flags: Severity: Warning Warning: Inconsistent Output: Validation Dimension: Consistency Pseudocode: | get.Country($countryCode) == $country Source: Reference: CreatedBy: Povilas Gibas MaintainedBy: Povilas Gibas CreationDate: 2018-06-27 ModificationDate: 2018-06-27 ModificationHist: Input: Target: country,countryCode Dependency: DependencyType: Internal DataChecks: Rpackages: rgbif Data: isocodes$name,isocodes$code Functionality: | FUNC &lt;- function() { result &lt;- sapply(seq_along(TARGET1), function(i) { if (is.na(TARGET1[i]) | is.na(TARGET2[i])) { NA } else { which(DEPEND1 == TARGET1[i]) == which(DEPEND2 == TARGET2[i]) } }) result &lt;- unlist(result) return(result) } 4.2 Manage your own data checks After adding/ removing/ editing the YAML file, you can load data checks into R using getDC() function. DC &lt;- getDC(&quot;path to your YAML file&quot;) You can also export data checks from your YAML file to .rda and roxygen2 comments. exportDC(&quot;path to your YAML file&quot;) "],
["bdchecks-architecture.html", "5 bdchecks architecture 5.1 The overall architecture 5.2 Component 1**** 5.3 Component 2****", " 5 bdchecks architecture 5.1 The overall architecture [ TBA ] 5.2 Component 1**** [ TBA ] 5.3 Component 2**** [ TBA ] "],
["getting-your-feedback.html", "6 Getting your feedback 6.1 Report a bug 6.2 Contribute", " 6 Getting your feedback Loading… 6.1 Report a bug Submit an issue at https://github.com/bd-R/bdchecks/issues 6.2 Contribute Contribute: https://github.com/bd-R/bdchecks Join: https://bd-r-group.slack.com "],
["bdchecks-citation.html", "7 bdchecks citation", " 7 bdchecks citation citation(&quot;bdchecks&quot;) ## ## To cite package &#39;bdchecks&#39; in publications use: ## ## Povilas Gibas, Tomer Gueta, Vijay Barve, Thiloshon Nagarajah and ## Yohay Carmel (2018). bdchecks: Biodiversity Data Checks. R ## package version 0.1.2. https://github.com/bd-R/bdchecks ## ## A BibTeX entry for LaTeX users is ## ## @Manual{, ## title = {bdchecks: Biodiversity Data Checks}, ## author = {Povilas Gibas and Tomer Gueta and Vijay Barve and Thiloshon Nagarajah and Yohay Carmel}, ## year = {2018}, ## note = {R package version 0.1.2}, ## url = {https://github.com/bd-R/bdchecks}, ## } "],
["learn-more.html", "8 Learn more", " 8 Learn more TDWG’s data quality tests and assertions Task Group Core suite of tests and assertions Core tests and assertions as GitHub issues A conceptual framework for quality assessment and management of biodiversity data (Veiga et al. 2017) References "]
]
